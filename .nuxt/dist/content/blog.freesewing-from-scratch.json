{
  "layout": "blog",
  "title": "Freesewing from scratch: Whether you're setting up a development environment, or want to run your own freesewing instance, this is what it takes.",
  "linktitle": "Freesewing from scratch",
  "img": "coffee.jpg",
  "caption": "Grab a coffee and let's do this",
  "author": "Joost De Cock",
  "category": "docs",
  "blurb": "Setting up a full freesewing instance, step by step.",
  "meta": {
    "index": 17,
    "fileName": "2017-09-09-freesewing-from-scratch.md",
    "section": "/blog",
    "dirName": "/"
  },
  "date": "2017-09-09",
  "path": "/blog/blog/freesewing-from-scratch",
  "permalink": "/blog/freesewing-from-scratch",
  "anchors": [
    [
      "#logtoc",
      "logtoc}"
    ]
  ],
  "body": "<p>The other day I had to setup a new development server to work on freesewing.</p>\n<p>While it’s not rocket science, I do feel it’s a good idea to write a post\ndocumenting the steps it takes to get up and running with your own\nfreesewing instance. Freesewing from scratch as it were.</p>\n<p>Apologies if this post is a bit… like this:</p>\n<p>{% include embed.html src=“<a href=\"https://www.youtube.com/embed/jkmoIPXs96E\">https://www.youtube.com/embed/jkmoIPXs96E</a>” %}</p>\n<p>I’m writing this as a blog post – and not a documentation page – because I can’t promise to maintain\nthese instructions every time something changes. But, since this is a lengthy post, a table of\ncontent is probably handy:</p>\n<h2>Table of contents</h2>\n<p>{:.no_toc}</p>\n<ul>\n<li>TOC - Do not remove this line\n{:toc #blogtoc}</li>\n</ul>\n<h2>Why would you want to do this?</h2>\n<p>There are two main reasons to set up your own environment:</p>\n<ul>\n<li>You are interested to start hacking/working on/developing freesewing</li>\n<li>You want to run your own instance, perhaps because you want to run your own pattern business</li>\n</ul>\n<p>Regardless the reasons, these instructions apply to both because we’re going to set up\na proper virtual server, and not some sort of environment on a laptop somewhere.</p>\n<p>As a developer, you might find this overkill, but I like to have my development copy publicly\navailable so that I can sometimes point users to it and ask them to test out a feature on\nthe bleeding edge of the codebase.</p>\n<h2>Get yourself a server</h2>\n<p>We’re going to setup a real server, so you need to get your hands on one first.</p>\n<p>I use <a href=\"https://www.linode.com/\">Linode</a>.\nI’ve been a happy customer of them  for years\n, but there are plenty of other options for cloud hosting.</p>\n<p>I’ve picked a 2GB (that’s the memory we’re talking about) Linode for this, but you can\nget away with a 1GB one too. This will set you back $5 per month.\nIt’s basically the price of two coffees per month.</p>\n<p>With the server under my control, I’ve deployed one of Linode’s images to it.\nI went with Debian 9 because <a href=\"http://www.debian.org/\">Debian</a> is my favourite OS, and 9 is the latest\nstable release.</p>\n<p>Once it’s setup, you can boot your Linode and it’s ready to go.\nLinode will ask for a root password during the setup. Make it long and impossible to guess. And write it down for now.</p>\n<h2>Configure DNS</h2>\n<p>I’m assuming you have some sort of domain name under your control. If not, get one as\nthey are dirt cheap.</p>\n<p>I have <a href=\"http://decock.org\">decock.org</a>, which I’ll use for the server’s primary hostname.\nAnd for the different freesewing services, I’ll use <a href=\"http://freesewing.org\">freesewing.org</a>.</p>\n<h3>Hostname and reverse DNS</h3>\n<p>I’ve named the server <a href=\"http://mei.decock.org\">mei.decock.org</a> (after <a href=\"https://overwatch.gamepedia.com/Mei\">that cutie in Overwatch</a>) and so at my DNS provider\n(<a href=\"https://www.eurodns.com/\">EuroDNS</a> should you wonder) I’ve setup and A record that points to the\nserver’s IP address: 139.162.166.219</p>\n<p>Essentially, this line in the zone file for <a href=\"http://decock.org\">decock.org</a>:</p>\n<pre><code class=\"language-sh\">mei\t IN A  139.162.166.219\n</code></pre>\n<p>Once this is done, I configured the reverse DNS in Linode management console so that it\npoints to <a href=\"http://mei.decock.org\">mei.decock.org</a>.</p>\n<h3>DNS for freesewing site, data, and core</h3>\n<p>Now we’re going to configure DNS for:</p>\n<ul>\n<li>Freesewing site: The frontend will live at <a href=\"http://joost.freesewing.org\">joost.freesewing.org</a></li>\n<li>Freesewing data: The data backend will live at <a href=\"http://joost.data.freesewing.org\">joost.data.freesewing.org</a></li>\n<li>Freesewing core: The core backend will live at <a href=\"http://joost.core.freesewing.org\">joost.core.freesewing.org</a></li>\n</ul>\n<p>These are all going to be hosted at <a href=\"http://mei.decock.org\">mei.decock.org</a>. Technically I could make this a CNAME\nrecord for all, but I’m going to setup and A record for the site, and then point the rest\nto them with CNAME records.</p>\n<p>Like this:</p>\n<pre><code>joost       IN A      139.162.166.219\njoost.data  IN CNAME  joost\njoost.core  IN CNAME  joost\n</code></pre>\n<p>That’s in the zone file for <a href=\"http://freesewing.org\">freesewing.org</a>.</p>\n<h2>Initial server configuration</h2>\n<h3>Connect with SSH</h3>\n<p>There’s a few things to do on your new server. The first is to connect to it.</p>\n<p>This should do the trick:</p>\n<pre><code class=\"language-sh\">ssh joost.freesewing.org -l root\n</code></pre>\n<p>Login with your root password.</p>\n<h3>Install updates</h3>\n<p>Before we do anything else, let’s install the latest updates.</p>\n<p>First get the list of latest software:</p>\n<pre><code class=\"language-sh\">apt-get update\n</code></pre>\n<p>Then install all updates:</p>\n<pre><code class=\"language-sh\">apt-get upgrade\n</code></pre>\n<h3>Create a user for yourself</h3>\n<p>You just logged in as root. The first thing we’ll do (after installing updates)\nis create a user so you won’t ever have to log in as root again.</p>\n<p>This does the trick:</p>\n<pre><code class=\"language-sh\">adduser joost\n</code></pre>\n<blockquote>\n<p>Obviously, the username is <em>joost</em> in this case, but you can pick whatever.\n{:.comment}</p>\n</blockquote>\n<p>We’ve added the regular user <code>joost</code>. You will be prompted for a password, make it impossible to guess.</p>\n<p>Since we won’t be logging in as root, our privileges will be limited.</p>\n<p>That’s good, but sometimes we will need root access. So, we’ll give our user <code>sudo</code> rights.</p>\n<p>On Debian, all it takes is to add your user to the <code>sudo</code> group like this:</p>\n<pre><code class=\"language-sh\">usermod -G -a sudo joost\n</code></pre>\n<h3>Disable remote root access</h3>\n<p>Sweet, now log out of your SSH session (type <code>exit</code>) and we’ll connect again, but\nthis time as your own user. In my case, that’s <code>joost</code>.</p>\n<pre><code class=\"language-sh\">ssh joost.freesewing.org -l joost\n</code></pre>\n<p>Once you’re logged in, we’re going to prevent remote logins by root.</p>\n<p>To do so, open up the SSH server configuration file:</p>\n<pre><code class=\"language-sh\">sudo vi /etc/ssh/sshd_config\n</code></pre>\n<p>Sudo will ask for your password, so enter it.</p>\n<p>Look for this line:</p>\n<pre><code>PermitRootLogin yes\n</code></pre>\n<p>and change it to:</p>\n<pre><code>PermitRootLogin no\n</code></pre>\n<blockquote>\n<p>I use vi as my editor, feel free to use something else like emacs or nano\n{:.tip}</p>\n</blockquote>\n<p>Cool. We’ve done the minimum to keep our system safe. Now let’s get freesewing up and running.</p>\n<h2>Setup git</h2>\n<p>Git is the version control system we’ll be using. It’s needed for different freesewing parts, so let’s get it\nup and running first.</p>\n<p>First install it:</p>\n<pre><code class=\"language-sh\">sudo apt-get install git\n</code></pre>\n<p>Now, we’re going to create an SSH key that we can add to our GitHub account, this way\nwe can pull and push code from/to GitHub without having to worry about authentication.</p>\n<p>Create the SSH key as such:</p>\n<pre><code class=\"language-sh\">ssh-keygen -t rsa -b 4096 -C &quot;joost@decock.org&quot;\n</code></pre>\n<p>Obviously, use your own email address.</p>\n<p>You’ll be asked where to save the file. You hit Enter to accept the default location.\nYou can add a passphrase if you want to.</p>\n<p>Now, we’ll add the key to <code>ssh-agent</code>. First make sure it’s running:</p>\n<pre><code class=\"language-sh\">eval $(ssh-agent -s)\n</code></pre>\n<p>Then add your key to it:</p>\n<pre><code class=\"language-sh\">ssh-add ~/.ssh/id_rsa\n</code></pre>\n<p>When this is done, <a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account\">add your SSH key to your GitHub account</a>.</p>\n<p>Last but not least, tell git who you are:</p>\n<pre><code class=\"language-sh\">git config --global user.email &quot;joost@decock.org&quot;\ngit config --global user.name &quot;Joost De Cock&quot;\n</code></pre>\n<h2>Freesewing site</h2>\n<h3>Install software</h3>\n<p>For the website, we’re going to need the following software:</p>\n<ul>\n<li><strong>Apache</strong>, the web server</li>\n<li><strong>Bundler</strong>, the ruby package manager</li>\n</ul>\n<p>The following command installs them, along with a compression library we need:</p>\n<pre><code class=\"language-sh\">sudo apt-get install apache2 bundler zlib1g-dev\n</code></pre>\n<h3>Clone the site repository</h3>\n<p>Change to your home directory, and create a subfolder called <code>git</code>, then cd into it:</p>\n<pre><code class=\"language-sh\">cd\nmkdir git\ncd git\n</code></pre>\n<p>In the <code>git</code> directory, we’ll keep all our repositories.</p>\n<p>Clone the site repo:</p>\n<pre><code class=\"language-sh\">git clone git@github.com:freesewing/site.git\n</code></pre>\n<p>This will place the <code>site</code> repository in the <code>site</code> directory.</p>\n<h3>Jekyll</h3>\n<p>cd into our new site repository, and let bundler handle the Jekyll install:</p>\n<pre><code class=\"language-sh\">cd site\nbundler install\n</code></pre>\n<p>This will install jekyll and all dependecies.</p>\n<p>Before we have Jekyll generate the site, you’ll need to update the configuration\nto reflect your own environment.</p>\n<p>The best thing to do is create your own config file in the <code>_config</code> directory.</p>\n<p>The one I use is <code>joost.yml</code>. You can copy that one, or simply make the changes in it.</p>\n<p>Only the start of the file needs to be updated. This is what it looks like:</p>\n<pre><code>url: 'https://joost.freesewing.org/'\ngithub: 'https://github.com/freesewing'\ntwitter: 'freesewing_org'\ninstagram: 'freesewing_org'\ngitter: 'https://gitter.im/freesewing/freesewing'\nbranch: 'develop'\n\nfuture: true\n\napi:\n  core: 'https://joost.core.freesewing.org'\n  data: 'https://joost.data.freesewing.org'\n</code></pre>\n<p>These are the things to change:</p>\n<ul>\n<li><strong>url</strong> : Set this to the url of your freesewing frontend</li>\n<li><strong>api</strong>\n<ul>\n<li><strong>core</strong> : Set this to the url of your core backend</li>\n<li><strong>data</strong> : Set this to the url of your data backend</li>\n</ul>\n</li>\n</ul>\n<p>Once this is done, let jekyll generate the site:</p>\n<pre><code>bundle exec jekyll build --config _config/joost.yml --incremental --watch &gt; /dev/null 2&gt;&amp;1 &amp;\n</code></pre>\n<blockquote>\n<p>Note that I’m pointing to my own config file here. If you used another one, update the\ncommand accordingly.\n{:.comment}</p>\n</blockquote>\n<p>Jekyll now generated our site in the <code>_site</code> directory. Now we should have apache serve up our website.</p>\n<h3>Apache</h3>\n<h4>HTTP site</h4>\n<p>Get to the apache configuration directory where site configurations are held:</p>\n<pre><code>cd /etc/apache2/sites-available \n</code></pre>\n<p>We’re going to add a new site, so let’s create an empty file:</p>\n<pre><code>sudo touch joost.freesewing.org.conf\n</code></pre>\n<p>To avoid having to use <code>sudo</code> everytime we want to update our site config,\nlet’s make it our file:</p>\n<pre><code>sudo chown joost joost.freesewing.org.conf\n</code></pre>\n<p>Now open the file with your editor of choice, and add the configuration.\nHere’s mine:</p>\n<pre><code>&lt;VirtualHost *:80&gt;\n  ServerName joost.freesewing.org\n  ServerAdmin joost@decock.org\n\n  DocumentRoot /home/joost/git/site/_site\n\n  &lt;Directory /&gt;\n    Options FollowSymLinks\n    AllowOverride None\n  &lt;/Directory&gt;\n\n  &lt;Directory /home/joost/git/site/_site&gt;\n    Options FollowSymLinks MultiViews\n    AllowOverride None\n    Require all granted\n  &lt;/Directory&gt;\n\n  LogLevel notice\n  ErrorLog /home/joost/logs/joost.site.error.log\n  CustomLog /home/joost/logs/joost.site.access.log combined\n\n  RewriteEngine on\n  RewriteCond %{SERVER_NAME} =joost.freesewing.org\n  RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n&lt;/VirtualHost&gt;\n\n</code></pre>\n<p>You can adapt it to your own needs, most of it is self-explanatory.</p>\n<p>For now, comment out these three lines:</p>\n<pre><code class=\"language-sh\">  #RewriteEngine on\n  #RewriteCond %{SERVER_NAME} =joost.freesewing.org\n  #RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n</code></pre>\n<p>These will force users who visit the HTTP site to the HTTPS site.\nBut since that one doesn’t work yet, we don’t need that for now.</p>\n<p>Before we tell apache about this new site, we need to create the directory where\nwe configured the log files to go:</p>\n<pre><code class=\"language-sh\">mkdir /home/joost/logs\n</code></pre>\n<p>Now tell apache about the new site, and reload the service:</p>\n<pre><code class=\"language-sh\">sudo a2ensite joost.freesewing.org.conf\nsudo service apache2 reload\n</code></pre>\n<p>If all is well, you can now point your browser to\nyour equivalent of <a href=\"http://joost.freesewing.org\">joost.freesewing.org</a>\nand you should see the site.</p>\n<h4>HTTPS site</h4>\n<p>It’s 2017, you should encrypt your site. To do so, we’re going to install\na certificate from <a href=\"https://letsencrypt.org/\">Let’s Encrypt</a>.</p>\n<p>This is handled through certbot, so let’s install that first:</p>\n<pre><code class=\"language-sh\">sudo apt-get install certbot\n</code></pre>\n<p>When it’s done, we can get a certificate. However, this apache version on Debian 9\ncan’t be auto-configured by certbot, so we’ll do it manually.</p>\n<p>We’ll let certbot spin up a temporary webserver for this, but it can’t bind to the port\napache is already listening on. So first, we stop apache:</p>\n<pre><code class=\"language-sh\">sudo service apache stop\n</code></pre>\n<p>Then, we run certbot in certificate-only mode:</p>\n<pre><code class=\"language-sh\">cerbot certonly\n</code></pre>\n<p>When prompted, pick the stand-alone server option (2) and enter your domain name.\nIn my case, it’s <code>joost.freesewing.org</code>.</p>\n<p>When you’re all done, get back to the apache site configuration directory.\nAs before, we’ll create an empty file, and change its ownership:</p>\n<pre><code class=\"language-sh\">cd /etc/apache2/sites-available \nsudo touch joost.freesewing.org-le.conf\nsudo chown joost joost.freesewing.org-le.conf\n</code></pre>\n<p>Now, let’s configure. Here’s what I’ve got:</p>\n<pre><code>&lt;IfModule mod_ssl.c&gt;\n&lt;VirtualHost *:443&gt;\n  ServerName joost.freesewing.org\n  ServerAdmin joost@decock.org\n\n  DocumentRoot /home/joost/git/site/_site\n\n  &lt;Directory /&gt;\n    Options FollowSymLinks\n    AllowOverride None\n  &lt;/Directory&gt;\n\n  &lt;Directory /home/joost/git/site/_site&gt;\n    Options FollowSymLinks MultiViews\n    AllowOverride None\n    Require all granted\n\n    RewriteEngine on\n\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n\n    RewriteRule ^drafts/(.*) show-draft [L]\n    RewriteRule ^drafts list-drafts [L]\n\n    RewriteRule ^draft/([a-z]+)/for/([a-z]+) /step/3/draft [L]\n    RewriteRule ^draft/([a-z]+) /step/2/draft [L]\n    RewriteRule ^draft /step/1/draft [L]\n\n    RewriteRule ^fork/([a-z]+)/for/([a-z]+) /step/3/fork [L]\n    RewriteRule ^fork/([a-z]+) /step/2/fork [L]\n\n    RewriteRule ^redraft/([a-z]+)/for/([a-z]+) /step/3/redraft [L]\n\n    RewriteRule ^models/(.*) show-model [L]\n    RewriteRule ^models account [L]\n\n    RewriteRule ^users/(.*) show-user [L]\n    RewriteRule ^users list-users [L]\n    RewriteRule ^profile(.*) show-user [L]\n  &lt;/Directory&gt;\n\n  LogLevel notice\n  ErrorLog /home/joost/logs/joost.site.error.log\n  CustomLog /home/joost/logs/joost.site.access.log combined\n\n  SSLCertificateFile /etc/letsencrypt/live/joost.freesewing.org/fullchain.pem\n  SSLCertificateKeyFile /etc/letsencrypt/live/joost.freesewing.org/privkey.pem\n  Include /etc/letsencrypt/options-ssl-apache.conf\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>As before, it’s pretty much self-explanatory. The things you might want to change\nare the servername, locations of log files and certificates.</p>\n<p>We’re including the <code>/etc/letsecncrypt/options-ssl-apache.conf</code> here, but it doesn’t exist yet.\nIn the auto-configure version of certbot, it would have been added for us.\nBut we can just add it ourselves. These are the contents:</p>\n<pre><code># Baseline setting to Include for SSL sites\n\nSSLEngine on\n\n# Intermediate configuration, tweak to your needs\nSSLProtocol             all -SSLv2 -SSLv3\nSSLCipherSuite          ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA\nSSLHonorCipherOrder     on\nSSLCompression          off\n\nSSLOptions +StrictRequire\n\n# Add vhost name to log entries:\nLogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-agent}i\\&quot;&quot; vhost_combined\nLogFormat &quot;%v %h %l %u %t \\&quot;%r\\&quot; %&gt;s %b&quot; vhost_common\n</code></pre>\n<p>Create the file, open it, and paste the content above in it.</p>\n<pre><code>sudo touch /etc/letsencrypt/options-ssl-apache.conf\nsudo vi /etc/letsencrypt/options-ssl-apache.conf\n</code></pre>\n<p>Apart from that include, we also have a bunch of rewrite rules.\nFor that, we’ll need to enable two the rewrite module.\nWhile we’re at it, we’ll also enable the encryption module:</p>\n<pre><code class=\"language-sh\">sudo a2enmod rewrite\nsudo a2enmod ssl\n</code></pre>\n<p>Once this is done, add the site and start the service again:</p>\n<pre><code class=\"language-sh\">sudo a2ensite joost.freesewing.org-le.conf\nsudo service apache2 start\n</code></pre>\n<p>Point your browser to your equivalent of <a href=\"https://joost.freesewing.org\">https://joost.freesewing.org</a>\nand you should get the encrypted site.</p>\n<p>Now that our encrypted site is up and running, uncomment the rewrite rules in our HTTP site\nthat force people to the HTTPS site:</p>\n<pre><code class=\"language-sh\">  RewriteEngine on\n  RewriteCond %{SERVER_NAME} =joost.freesewing.org\n  RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n</code></pre>\n<p>That’s it, you’ve setup the freesewing site.\nAlthough it will be severely crippled without the data backend.</p>\n<h2>Freesewing data</h2>\n<p>With our site good to go, let’s get the data backend up and running.</p>\n<h3>Install software</h3>\n<p>We’ll need some more software for this:</p>\n<ul>\n<li><strong>PHP</strong>, the scripting language, along with the <strong>XML</strong> and <strong>MbString</strong> modules</li>\n<li><strong>MariaDb</strong>, the database server</li>\n<li><strong>Composer</strong>, the PHP package manager</li>\n<li><strong>Inkscape</strong>, to tile our generated patterns</li>\n<li><strong>Imagick</strong>, to handle user avatars</li>\n</ul>\n<p>Install them as such:</p>\n<pre><code class=\"language-sh\">apt-get install php7.0 php7.0-xml php7.0-mbstring mariadb-server composer inkscape php-imagick\n</code></pre>\n<blockquote>\n<p>We need PHP version 7, because that’s what the data backend requires.\n{:.comment}</p>\n</blockquote>\n<h3>MariaDb</h3>\n<p>When it completes, proceed to secure your database server:</p>\n<pre><code class=\"language-sh\">sudo mysql_secure_installation\n</code></pre>\n<p>This will prompt you for a database root password. Make it long and hard to guess.</p>\n<h3>Freesewing tile</h3>\n<p>Freesewing data handles the conversion of SVG patterns into tiled PDFs.\nFor this, it depends on freesewing tile. Change to the <code>git</code> folder in your home directory and clone the tile repo:</p>\n<pre><code class=\"language-sh\">git clone git@github.com:freesewing/tile.git\n</code></pre>\n<p>cd into it, and make and install tile.</p>\n<pre><code class=\"language-sh\">cd tile\nmake \nsudo make install \n</code></pre>\n<p>That was easy :)</p>\n<h3>Clone the data repository</h3>\n<p>Change to the <code>git</code> folder in your home directory and clone the data repo:</p>\n<pre><code class=\"language-sh\">git clone git@github.com:freesewing/data.git\n</code></pre>\n<p>cd into it, and let composer install all dependencies.</p>\n<pre><code class=\"language-sh\">cd data\ncomposer install\ncomposer dump-autoload -o\n</code></pre>\n<h3>Create the database</h3>\n<p>Time to create our database, and database user. Connect to the database server as such:</p>\n<pre><code class=\"language-sh\">sudo mysql -u root\n</code></pre>\n<p>You don’t need to enter a password, because the database server uses the <code>unix_socket</code>\nauthentication plugin that matches the local username to the database user.</p>\n<p>Since you connect as root (you used sudo) you are now the root database user.</p>\n<p>First, let’s create our database:</p>\n<pre><code>CREATE DATABASE freesewing_data;\n</code></pre>\n<p>Just as we don’t login with root on our server, we won’t login as root on our database server.\nSo let’s add a user, and grant them privileges:</p>\n<pre><code>CREATE USER 'freesewing'@'localhost' IDENTIFIED VIA mysql_native_password USING 'YOUR_PASSWORD_HERE';GRANT USAGE ON *.* TO 'freesewing'@'localhost' REQUIRE NONE WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;\nGRANT ALL PRIVILEGES ON `freesewing\\_%`.* TO 'freesewing'@'localhost';\n</code></pre>\n<blockquote>\n<p>Obviously, replace <code>YOUR_PASSWORD_HERE</code> in the command with your password.\n{:.comment}</p>\n</blockquote>\n<p>When it’s done, flush the privileges and disconnect:</p>\n<pre><code>FLUSH PRIVILEGES;\nquit;\n</code></pre>\n<p>With our database in place, it’s time to populate it with all tables.</p>\n<p>Assuming you’re still in the data repository directory, run this command:</p>\n<pre><code class=\"language-sh\">mysql -u root freesewing_data &lt; DATABASE_STRUCTURE.sql\n</code></pre>\n<h3>Create the users directory</h3>\n<p>Our users’ profile pictures and pattern drafts will be stored on disk.\nWe need to add this directory to the repository (since it’s ignored by git,\nit is not in the repository)\nand let the webserver own it:</p>\n<pre><code class=\"language-sh\">mkdir public/static/users\nsudo chown www-data public/static/users\n</code></pre>\n<h3>Apache</h3>\n<h4>HTTP site</h4>\n<p>Get to the apache configuration directory where site configurations are held:</p>\n<pre><code>cd /etc/apache2/sites-available \n</code></pre>\n<p>We’re going to add a new site, so let’s create an empty file:</p>\n<pre><code>sudo touch joost.data.freesewing.org.conf\n</code></pre>\n<p>To avoid having to use <code>sudo</code> everytime we want to update our site config,\nlet’s make it our file:</p>\n<pre><code>sudo chown joost joost.data.freesewing.org.conf\n</code></pre>\n<p>Now open the file with your editor of choice, and add the configuration.\nHere’s mine:</p>\n<pre><code>&lt;VirtualHost *:80&gt;\n  ServerName joost.data.freesewing.org\n  ServerAdmin joost@decock.org\n\n  DocumentRoot /home/joost/git/data/public\n\n  &lt;Directory /&gt;\n    Options FollowSymLinks\n    AllowOverride None\n  &lt;/Directory&gt;\n\n  &lt;Directory /home/joost/git/data/public&gt;\n    Options FollowSymLinks MultiViews\n    AllowOverride None\n    Require all granted\n    RewriteEngine on\n    RewriteCond %{SERVER_NAME} =joost.data.freesewing.org\n    RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n  &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n\n</code></pre>\n<p>You can adapt it to your own needs, most of it is self-explanatory.</p>\n<p>For now, comment out these three lines:</p>\n<pre><code class=\"language-sh\">  #RewriteEngine on\n  #RewriteCond %{SERVER_NAME} =joost.data.freesewing.org\n  #RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n</code></pre>\n<p>These will force users who visit the HTTP site to the HTTPS site.\nBut since that one doesn’t work yet, we don’t need that for now.</p>\n<p>Now tell apache about the new site, and reload the service:</p>\n<pre><code class=\"language-sh\">sudo a2ensite joost.data.freesewing.org.conf\nsudo service apache2 reload\n</code></pre>\n<p>If all is well, you can now point your browser to\nyour equivalent of <a href=\"http://joost.data.freesewing.org\">joost.data.freesewing.org</a>\nand you should see a error message from <a href=\"https://www.slimframework.com/\">the Slim framework</a>.</p>\n<h4>HTTPS site</h4>\n<p>You should encrypt your backend. To do so, we’re going to install\nanother certificate from Let’s Encrypt.</p>\n<p>Like with our site,\nwe’ll let certbot spin up a temporary webserver for this, but it can’t bind to the port\napache is already listening on. So first, we stop apache:</p>\n<pre><code class=\"language-sh\">sudo service apache stop\n</code></pre>\n<p>Then, we run certbot in certificate-only mode:</p>\n<pre><code class=\"language-sh\">cerbot certonly\n</code></pre>\n<p>When prompted, pick the stand-along server option (2) and enter your domain name.\nIn my case, it’s <code>joost.data.freesewing.org</code>.</p>\n<p>When you’re all done, get back to the apache site configuration directory.\nAs before, we’ll create an empty file, and change its ownership:</p>\n<pre><code class=\"language-sh\">cd /etc/apache2/sites-available \nsudo touch joost.data.freesewing.org-le.conf\nsudo chown joost joost.data.freesewing.org-le.conf\n</code></pre>\n<p>Now, let’s configure. Here’s what I’ve got:</p>\n<pre><code>&lt;IfModule mod_ssl.c&gt;\n&lt;VirtualHost *:443&gt;\n  ServerName joost.data.freesewing.org\n  ServerAdmin joost@decock.org\n\n  SSLCertificateFile /etc/letsencrypt/live/joost.data.freesewing.org/fullchain.pem\n  SSLCertificateKeyFile /etc/letsencrypt/live/joost.data.freesewing.org/privkey.pem\n  Include /etc/letsencrypt/options-ssl-apache.conf\n\n  DocumentRoot /home/joost/git/data/public\n\n  &lt;Directory /&gt;\n    Options FollowSymLinks\n    AllowOverride None\n  &lt;/Directory&gt;\n\n  &lt;Directory /home/joost/git/data/public&gt;\n    Options FollowSymLinks MultiViews\n    AllowOverride None\n    Require all granted\n\n    RewriteEngine on\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^ index.php [QSA,L]\n  &lt;/Directory&gt;\n\n  SetEnv DB_HOST &quot;localhost&quot;\n  SetEnv DB_DB &quot;freesewing_data&quot;\n  SetEnv DB_USER &quot;freesewing&quot;\n  SetEnv DB_PASS &quot;FREESEWING_DB_USER_PASSWORD_HERE&quot;\n  SetEnv JWT_SECRET &quot;YOUR_JWT_SECRET_HERE&quot;\n  SetEnv MAILGUN_KEY &quot;YOUR_MAILGUN_API_KEY_HERE&quot;\n  SetEnv MAILGUN_INSTANCE &quot;MAILGUN_INSTANCE_HERE&quot;\n  SetEnv GMAIL_USER &quot;GMAIL_EMAIL_ADDRESS_HERE&quot;\n  SetEnv GMAIL_SECRET &quot;GMAIL_APP_PASSWORD_HERE&quot;\n  SetEnv DATA_API &quot;https://joost.data.freesewing.org&quot;\n  SetEnv CORE_API &quot;https://joost.core.freesewing.org&quot;\n  SetEnv SITE &quot;https://joost.freesewing.org&quot;\n  SetEnv ORIGIN &quot;https://joost.freesewing.org&quot;\n  SetEnv LOG_FILE &quot;/home/joost/logs/joost.data.app.log&quot;\n\n  LogLevel warn\n  ErrorLog /home/joost/logs/joost.data.error.log\n  CustomLog /home/joost/logs/joost.data.access.log combined\n\n&lt;/VirtualHost&gt;\n&lt;/IfModule&gt;\n</code></pre>\n<p>As before, it’s pretty much self-explanatory. The things you might want to change\nare the servername, locations of log files and certificates.</p>\n<p>What’s new is a bunch of environment variables that you’ll need to adapt.\nThis is because things like passwords shoulnd’t be kept in the source code.\nInstead, we define them here, and use the environment variables.</p>\n<p>This are the things to adapt:</p>\n<ul>\n<li><strong>DB_HOST</strong>: Your database host, <code>localhost</code> in our case</li>\n<li><strong>DB_DB</strong>: Your database, <code>freesewing_data</code> in our case</li>\n<li><strong>DB_USER</strong>: Your database user, <code>freesewing</code> in our case</li>\n<li><strong>DB_PASS</strong>: Your database user password</li>\n<li><strong>JWT_SECRET</strong>: A random string to be used as secret for our JWT middleware</li>\n<li><strong>MAILGUN_KEY</strong>: Freesewing data uses <a href=\"https://www.mailgun.com/\">MailGun</a> for email delivery. This is the API key.</li>\n<li><strong>MAILGUN_INSTANCE</strong>: The mailgun instance</li>\n<li><strong>GMAIL_USER</strong>: Freesewing data also uses Gmail for email delivery (see <a href=\"/blog/email-spam-problems/\">this blog post</a> to understand why). This is the email address of the Google account you’ll use</li>\n<li><strong>GMAIL_SECRET</strong>: The password of the Google account, or more probably <a href=\"https://support.google.com/accounts/answer/185833?hl=en\">an app password</a> (you are using two-factor authentication on your account, right?)</li>\n<li><strong>DATA_API</strong>: The url to your data API</li>\n<li><strong>CORE_API</strong>: The url to your core API</li>\n<li><strong>SITE</strong>: The url of your frontend</li>\n<li><strong>ORIGIN</strong>: The url of your frontend</li>\n</ul>\n<p>Once this is done, add the site and start the service again:</p>\n<pre><code class=\"language-sh\">sudo a2ensite joost.data.freesewing.org-le.conf\nsudo service apache2 start\n</code></pre>\n<p>Before you continue, you need to create the log file for Slim and change its permissions:</p>\n<pre><code class=\"language-sh\">touch /home/joost/logs/joost.data.app.log\nsudo chown www-data /home/joost/logs/joost.data.app.log\n</code></pre>\n<p>Now if you point your browser to your equivalent of <a href=\"https://joost.data.freesewing.org\">https://joost.data.freesewing.org</a>\nyou should get an error message like this one:</p>\n<p>{% include figure.html\nurl=&quot;/img/blog/freesewing-from-scratch/error.png&quot;\ndescription=“This is an API, not some promiscuous free-for-all”\n%}</p>\n<p>Now that our encrypted site is up and running, uncomment the rewrite rules in our HTTP site\nthat force people to the HTTPS site:</p>\n<pre><code class=\"language-sh\">  RewriteEngine on\n  RewriteCond %{SERVER_NAME} =joost.data.freesewing.org\n  RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n</code></pre>\n<p>That’s it, you’ve setup the freesewing data backend.</p>\n<p>All that’s left to do now is setup freesewing core.</p>\n<h2>Freesewing core</h2>\n<h3>Clone the repository</h3>\n<p>Let’s get core. Change to the <code>git</code> folder in your home directory and clone the core repo:</p>\n<pre><code class=\"language-sh\">git clone git@github.com:freesewing/core.git\n</code></pre>\n<p>cd into it, and make and let composer install all dependencies.</p>\n<pre><code class=\"language-sh\">cd core\ncomposer install \ncomposer dump-autoload -o \n</code></pre>\n<p>That’s all we need.</p>\n<h3>Apache</h3>\n<h4>HTTP site</h4>\n<p>Get to the apache configuration directory where site configurations are held:</p>\n<pre><code>cd /etc/apache2/sites-available \n</code></pre>\n<p>We’re going to add a new site, so let’s create an empty file:</p>\n<pre><code>sudo touch joost.core.freesewing.org.conf\n</code></pre>\n<p>To avoid having to use <code>sudo</code> everytime we want to update our site config,\nlet’s make it our file:</p>\n<pre><code>sudo chown joost joost.core.freesewing.org.conf\n</code></pre>\n<p>Now open the file with your editor of choice, and add the configuration.\nHere’s mine:</p>\n<pre><code>&lt;VirtualHost *:80&gt;\n  ServerName joost.core.freesewing.org\n  ServerAdmin joost@decock.org\n\n  DocumentRoot /home/joost/git/core\n\n  &lt;Directory /&gt;\n    Options FollowSymLinks\n    AllowOverride None\n  &lt;/Directory&gt;\n\n  &lt;Directory /home/joost/git/core&gt;\n    Options FollowSymLinks MultiViews\n    AllowOverride None\n    Require all granted\n  &lt;/Directory&gt;\n\n  LogLevel notice\n  ErrorLog /home/joost/logs/joost.core.error.log\n  CustomLog /home/joost/logs/joost.core.access.log combined\n\n  RewriteEngine on\n  RewriteCond %{SERVER_NAME} =joost.core.freesewing.org\n  RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>You can adapt it to your own needs, most of it is self-explanatory.</p>\n<p>For now, comment out these three lines:</p>\n<pre><code class=\"language-sh\">  #RewriteEngine on\n  #RewriteCond %{SERVER_NAME} =joost.core.freesewing.org\n  #RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n</code></pre>\n<p>These will force users who visit the HTTP site to the HTTPS site.\nBut since that one doesn’t work yet, we don’t need that for now.</p>\n<p>Now tell apache about the new site, and reload the service:</p>\n<pre><code class=\"language-sh\">sudo a2ensite joost.freesewing.org.conf\nsudo service apache2 reload\n</code></pre>\n<h4>HTTPS site</h4>\n<p>We’ll also encrypt our core backend, with another certificate from\n<a href=\"https://letsencrypt.org/\">Let’s Encrypt</a>.</p>\n<p>First, stop Apache:</p>\n<pre><code class=\"language-sh\">sudo service apache stop\n</code></pre>\n<p>Then, we run certbot in certificate-only mode:</p>\n<pre><code class=\"language-sh\">cerbot certonly\n</code></pre>\n<p>When prompted, pick the stand-alone server option (2) and enter your domain name.\nIn my case, it’s <code>joost.core.freesewing.org</code>.</p>\n<p>When you’re all done, get back to the apache site configuration directory.\nAs before, we’ll create an empty file, and change its ownership:</p>\n<pre><code class=\"language-sh\">cd /etc/apache2/sites-available \nsudo touch joost.core.freesewing.org-le.conf\nsudo chown joost joost.core.freesewing-le.org.conf\n</code></pre>\n<p>Now, let’s configure. Here’s what I’ve got:</p>\n<pre><code>&lt;IfModule mod_ssl.c&gt;\n&lt;VirtualHost *:443&gt;\n  ServerName joost.core.freesewing.org\n  ServerAdmin joost@decock.org\n\n  DocumentRoot /home/joost/git/core\n\n  &lt;Directory /&gt;\n    Options FollowSymLinks\n    AllowOverride None\n  &lt;/Directory&gt;\n\n  &lt;Directory /home/joost/git/core&gt;\n    Options FollowSymLinks MultiViews\n    AllowOverride None\n    Require all granted\n  &lt;/Directory&gt;\n\n  LogLevel notice\n  ErrorLog /home/joost/logs/joost.core.error.log\n  CustomLog /home/joost/logs/joost.core.access.log combined\n\n  SSLCertificateFile /etc/letsencrypt/live/joost.core.freesewing.org/fullchain.pem\n  SSLCertificateKeyFile /etc/letsencrypt/live/joost.core.freesewing.org/privkey.pem\n  Include /etc/letsencrypt/options-ssl-apache.conf\n&lt;/VirtualHost&gt;\n&lt;/IfModule&gt;\n</code></pre>\n<p>As before, it’s pretty much self-explanatory. The things you might want to change\nare the servername, locations of log files and certificates.</p>\n<p>Once this is done, add the site and start the service again:</p>\n<pre><code class=\"language-sh\">sudo a2ensite joost.core.freesewing.org-le.conf\nsudo service apache2 start\n</code></pre>\n<p>Point your browser to your equivalent of <a href=\"https://joost.core.freesewing.org/?service=info&amp;format=html\">https://joost.core.freesewing.org/?service=info&amp;format=html</a>\nto test it.</p>\n<p>Now that our encrypted site is up and running, uncomment the rewrite rules in our HTTP site\nthat force people to the HTTPS site:</p>\n<pre><code class=\"language-sh\">  RewriteEngine on\n  RewriteCond %{SERVER_NAME} =joost.core.freesewing.org\n  RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,QSA,R=permanent]\n</code></pre>\n<p>That’s it, you’ve setup freesewing core, and that’s it! You now how a full freesewing instance.</p>\n<p>Happy hacking :)</p>\n<blockquote>\n<h5>OMG you’re still here!</h5>\n<p>If you’ve you’ve made it to the bottom of this post, please leave a comment below.</p>\n<p>I’m really curious whether anybody is going to read this entire thing!\n{:.comment}</p>\n</blockquote>\n"
}